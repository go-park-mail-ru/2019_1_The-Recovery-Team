// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-03-19 19:46:39.785352 +0300 MSK m=+0.106623288

package docs

import (
	"bytes"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "swagger": "2.0",
    "info": {
        "description": "This is a super game.",
        "title": "Sad Islands API",
        "contact": {},
        "license": {},
        "version": "1.0"
    },
    "host": "104.248.28.45",
    "basePath": "/api/v1",
    "paths": {
        "/avatars": {
            "put": {
                "description": "Update profile avatar",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Put avatar",
                "operationId": "put-avatar",
                "parameters": [
                    {
                        "description": "Avatar",
                        "name": "avatar",
                        "in": "body",
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile avatar is updated successfully",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.ProfileAvatar"
                        }
                    },
                    "400": {
                        "description": "Incorrect request data"
                    },
                    "403": {
                        "description": "Not authorized"
                    },
                    "500": {
                        "description": "Database error"
                    }
                }
            }
        },
        "/profiles": {
            "get": {
                "description": "Check profile existence with email or nickname",
                "summary": "Get profiles",
                "operationId": "get-profiles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Profile email",
                        "name": "email",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Profile nickname",
                        "name": "nickname",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Profile found successfully"
                    },
                    "400": {
                        "description": "Incorrect request data"
                    },
                    "403": {
                        "description": "Not authorized"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Database error"
                    }
                }
            },
            "post": {
                "description": "Create profile",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Post profile",
                "operationId": "post-profile",
                "parameters": [
                    {
                        "description": "Email, nickname, password",
                        "name": "profile_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.ProfileCreate"
                        }
                    },
                    {
                        "description": "Avatar",
                        "name": "avatar",
                        "in": "body",
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Profile created successfully",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.ProfileCreated"
                        }
                    },
                    "400": {
                        "description": "Incorrect request data"
                    },
                    "409": {
                        "description": "Email or nickname already exists"
                    },
                    "422": {
                        "description": "Invalid request data",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.HandlerError"
                        }
                    },
                    "500": {
                        "description": "Database error"
                    }
                }
            }
        },
        "/profiles/{id}": {
            "get": {
                "description": "Get profile info (for profile owner returns info with email)",
                "produces": [
                    "application/json"
                ],
                "summary": "Get profile",
                "operationId": "get-profile",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Profile ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile found successfully",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Profile"
                        }
                    },
                    "403": {
                        "description": "Not authorized"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Database error"
                    }
                }
            },
            "put": {
                "description": "Update profile info",
                "consumes": [
                    "application/json"
                ],
                "summary": "Put profile",
                "operationId": "put-profile",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Profile ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Email, nickname",
                        "name": "profile_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.ProfileUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Profile info is updated successfully"
                    },
                    "400": {
                        "description": "Incorrect request data"
                    },
                    "403": {
                        "description": "Not authorized"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Invalid request data",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.HandlerError"
                        }
                    },
                    "500": {
                        "description": "Database error"
                    }
                }
            }
        },
        "/profiles/{id}/password": {
            "put": {
                "description": "Update profile password",
                "consumes": [
                    "application/json"
                ],
                "summary": "Put profile password",
                "operationId": "put-profile_password",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Profile ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Password",
                        "name": "profile_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.ProfileUpdatePassword"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Profile password is updated successfully"
                    },
                    "400": {
                        "description": "Incorrect request data"
                    },
                    "403": {
                        "description": "Not authorized"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Invalid request data",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.HandlerError"
                        }
                    },
                    "500": {
                        "description": "Database error"
                    }
                }
            }
        },
        "/scores": {
            "get": {
                "description": "Get scoreboard",
                "produces": [
                    "application/json"
                ],
                "summary": "Get scoreboard",
                "operationId": "get-scoreboard",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "limit number",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "start index",
                        "name": "start",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Scoreboard found successfully",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Profiles"
                        }
                    },
                    "400": {
                        "description": "Incorrect request data"
                    },
                    "500": {
                        "description": "Database error"
                    }
                }
            }
        },
        "/sessions": {
            "get": {
                "description": "Get profile id of authorized client",
                "produces": [
                    "application/json"
                ],
                "summary": "Get session",
                "operationId": "get-session",
                "responses": {
                    "200": {
                        "description": "Profile ID found successfully",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.ProfileID"
                        }
                    },
                    "403": {
                        "description": "Not authorized"
                    }
                }
            },
            "post": {
                "description": "Creates client session",
                "consumes": [
                    "application/json"
                ],
                "summary": "Post session",
                "operationId": "post-session",
                "parameters": [
                    {
                        "description": "Email, password",
                        "name": "profile_login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.ProfileLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session is created successfully",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Profile"
                        }
                    },
                    "400": {
                        "description": "Incorrect request data"
                    },
                    "403": {
                        "description": "Not authorized"
                    },
                    "422": {
                        "description": "Invalid request data",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.HandlerError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes client session",
                "summary": "Delete session",
                "operationId": "delete-session",
                "responses": {
                    "200": {
                        "description": "Session is deleted successfully"
                    },
                    "403": {
                        "description": "Not authorized"
                    },
                    "404": {
                        "description": "Session not found"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.HandlerError": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                }
            }
        },
        "models.Profile": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "upload/img/1.png"
                },
                "email": {
                    "type": "string",
                    "example": "test@mail.ru"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "loss": {
                    "type": "integer",
                    "example": 50
                },
                "nickname": {
                    "type": "string",
                    "example": "test"
                },
                "record": {
                    "type": "integer",
                    "example": 1500
                },
                "win": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "models.ProfileAvatar": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "upload/img/1.png"
                }
            }
        },
        "models.ProfileCreate": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "test@mail.ru"
                },
                "nickname": {
                    "type": "string",
                    "example": "test"
                },
                "password": {
                    "type": "string",
                    "example": "password"
                }
            }
        },
        "models.ProfileCreated": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "upload/img/1.png"
                },
                "email": {
                    "type": "string",
                    "example": "test@mail.ru"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "nickname": {
                    "type": "string",
                    "example": "test"
                }
            }
        },
        "models.ProfileID": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "models.ProfileInfo": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "upload/img/1.png"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "loss": {
                    "type": "integer",
                    "example": 50
                },
                "nickname": {
                    "type": "string",
                    "example": "test"
                },
                "record": {
                    "type": "integer",
                    "example": 1500
                },
                "win": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "models.ProfileLogin": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "test@mail.ru"
                },
                "password": {
                    "type": "string",
                    "example": "password"
                }
            }
        },
        "models.ProfileUpdate": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "test@mail.ru"
                },
                "nickname": {
                    "type": "string",
                    "example": "test"
                }
            }
        },
        "models.ProfileUpdatePassword": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "password"
                },
                "password_old": {
                    "type": "string",
                    "example": "password_old"
                }
            }
        },
        "models.Profiles": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ProfileInfo"
                    }
                },
                "total": {
                    "type": "integer",
                    "example": 50
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo swaggerInfo

type s struct{}

func (s *s) ReadDoc() string {
	t, err := template.New("swagger_info").Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, SwaggerInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
