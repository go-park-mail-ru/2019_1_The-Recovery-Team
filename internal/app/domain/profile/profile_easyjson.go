// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package profile

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile(in *jlexer.Lexer, out *UpdatePassword) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "password":
			out.Password = string(in.String())
		case "password_old":
			out.PasswordOld = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile(out *jwriter.Writer, in UpdatePassword) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"password_old\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PasswordOld))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdatePassword) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdatePassword) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdatePassword) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdatePassword) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile(l, v)
}
func easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile1(in *jlexer.Lexer, out *UpdateInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "nickname":
			out.Nickname = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile1(out *jwriter.Writer, in UpdateInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Nickname != "" {
		const prefix string = ",\"nickname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Nickname))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile1(l, v)
}
func easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile2(in *jlexer.Lexer, out *Score) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "position":
			out.Position = uint64(in.Uint64())
		case "record":
			out.Record = int64(in.Int64())
		case "win":
			out.Win = int64(in.Int64())
		case "loss":
			out.Loss = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile2(out *jwriter.Writer, in Score) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Position))
	}
	{
		const prefix string = ",\"record\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Record))
	}
	{
		const prefix string = ",\"win\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Win))
	}
	{
		const prefix string = ",\"loss\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Loss))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Score) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Score) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Score) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Score) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile2(l, v)
}
func easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile3(in *jlexer.Lexer, out *Registration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nickname":
			out.Nickname = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile3(out *jwriter.Writer, in Registration) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nickname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Nickname))
	}
	{
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Registration) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Registration) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Registration) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Registration) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile3(l, v)
}
func easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile4(in *jlexer.Lexer, out *Profiles) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "List":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if out.List == nil {
					if !in.IsDelim(']') {
						out.List = make([]Info, 0, 1)
					} else {
						out.List = []Info{}
					}
				} else {
					out.List = (out.List)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Info
					(v1).UnmarshalEasyJSON(in)
					out.List = append(out.List, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "total":
			out.Total = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile4(out *jwriter.Writer, in Profiles) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"List\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.List == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.List {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Total))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Profiles) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Profiles) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Profiles) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Profiles) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile4(l, v)
}
func easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile5(in *jlexer.Lexer, out *Profile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "id":
			out.ID = uint64(in.Uint64())
		case "nickname":
			out.Nickname = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "oauth":
			out.Oauth = string(in.String())
		case "oauthId":
			out.OauthId = string(in.String())
		case "position":
			out.Position = uint64(in.Uint64())
		case "record":
			out.Record = int64(in.Int64())
		case "win":
			out.Win = int64(in.Int64())
		case "loss":
			out.Loss = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile5(out *jwriter.Writer, in Profile) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.ID))
	}
	if in.Nickname != "" {
		const prefix string = ",\"nickname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Nickname))
	}
	if in.Avatar != "" {
		const prefix string = ",\"avatar\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Avatar))
	}
	if in.Oauth != "" {
		const prefix string = ",\"oauth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Oauth))
	}
	if in.OauthId != "" {
		const prefix string = ",\"oauthId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OauthId))
	}
	{
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Position))
	}
	{
		const prefix string = ",\"record\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Record))
	}
	{
		const prefix string = ",\"win\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Win))
	}
	{
		const prefix string = ",\"loss\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Loss))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Profile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Profile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Profile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Profile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile5(l, v)
}
func easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile6(in *jlexer.Lexer, out *OauthResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "response":
			if in.IsNull() {
				in.Skip()
				out.Response = nil
			} else {
				in.Delim('[')
				if out.Response == nil {
					if !in.IsDelim(']') {
						out.Response = make([]OauthAvatar, 0, 4)
					} else {
						out.Response = []OauthAvatar{}
					}
				} else {
					out.Response = (out.Response)[:0]
				}
				for !in.IsDelim(']') {
					var v4 OauthAvatar
					(v4).UnmarshalEasyJSON(in)
					out.Response = append(out.Response, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile6(out *jwriter.Writer, in OauthResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"response\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Response == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Response {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OauthResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OauthResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OauthResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OauthResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile6(l, v)
}
func easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile7(in *jlexer.Lexer, out *OauthAvatar) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "photo_100":
			out.Avatar = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile7(out *jwriter.Writer, in OauthAvatar) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"photo_100\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Avatar))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OauthAvatar) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OauthAvatar) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OauthAvatar) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OauthAvatar) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile7(l, v)
}
func easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile8(in *jlexer.Lexer, out *OauthAccessTokenRaw) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access_token":
			out.Token = string(in.String())
		case "user_id":
			out.UserId = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile8(out *jwriter.Writer, in OauthAccessTokenRaw) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"access_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UserId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OauthAccessTokenRaw) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OauthAccessTokenRaw) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OauthAccessTokenRaw) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OauthAccessTokenRaw) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile8(l, v)
}
func easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile9(in *jlexer.Lexer, out *OauthAccessToken) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access_token":
			out.Token = string(in.String())
		case "user_id":
			out.UserId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile9(out *jwriter.Writer, in OauthAccessToken) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"access_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OauthAccessToken) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OauthAccessToken) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OauthAccessToken) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OauthAccessToken) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile9(l, v)
}
func easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile10(in *jlexer.Lexer, out *Login) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile10(out *jwriter.Writer, in Login) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Login) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Login) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Login) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Login) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile10(l, v)
}
func easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile11(in *jlexer.Lexer, out *Info) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "nickname":
			out.Nickname = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "oauth":
			out.Oauth = string(in.String())
		case "oauthId":
			out.OauthId = string(in.String())
		case "position":
			out.Position = uint64(in.Uint64())
		case "record":
			out.Record = int64(in.Int64())
		case "win":
			out.Win = int64(in.Int64())
		case "loss":
			out.Loss = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile11(out *jwriter.Writer, in Info) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.ID))
	}
	if in.Nickname != "" {
		const prefix string = ",\"nickname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Nickname))
	}
	if in.Avatar != "" {
		const prefix string = ",\"avatar\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Avatar))
	}
	if in.Oauth != "" {
		const prefix string = ",\"oauth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Oauth))
	}
	if in.OauthId != "" {
		const prefix string = ",\"oauthId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OauthId))
	}
	{
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Position))
	}
	{
		const prefix string = ",\"record\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Record))
	}
	{
		const prefix string = ",\"win\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Win))
	}
	{
		const prefix string = ",\"loss\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Loss))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Info) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Info) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Info) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Info) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile11(l, v)
}
func easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile12(in *jlexer.Lexer, out *ID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile12(out *jwriter.Writer, in ID) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile12(l, v)
}
func easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile13(in *jlexer.Lexer, out *Created) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "email":
			out.Email = string(in.String())
		case "nickname":
			out.Nickname = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "position":
			out.Position = uint64(in.Uint64())
		case "record":
			out.Record = int64(in.Int64())
		case "win":
			out.Win = int64(in.Int64())
		case "loss":
			out.Loss = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile13(out *jwriter.Writer, in Created) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.ID))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Nickname != "" {
		const prefix string = ",\"nickname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Nickname))
	}
	if in.Avatar != "" {
		const prefix string = ",\"avatar\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Position))
	}
	{
		const prefix string = ",\"record\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Record))
	}
	{
		const prefix string = ",\"win\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Win))
	}
	{
		const prefix string = ",\"loss\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Loss))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Created) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Created) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Created) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Created) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile13(l, v)
}
func easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile14(in *jlexer.Lexer, out *Create) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "nickname":
			out.Nickname = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile14(out *jwriter.Writer, in Create) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Nickname != "" {
		const prefix string = ",\"nickname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Nickname))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Create) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Create) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Create) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Create) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile14(l, v)
}
func easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile15(in *jlexer.Lexer, out *Avatar) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "avatar":
			out.Path = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile15(out *jwriter.Writer, in Avatar) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Path != "" {
		const prefix string = ",\"avatar\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Avatar) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Avatar) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson521a5691EncodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Avatar) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Avatar) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson521a5691DecodeGithubComGoParkMailRu20191TheRecoveryTeamInternalAppDomainProfile15(l, v)
}
